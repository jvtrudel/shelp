#! /bin/bash

shelp()(
 set -eu -o pipefail

 failed(){
     >&2 echo -e "\nSHELP ERROR\nFailed $@\n" && exit 1 ;
 }

 usage(){
 cat <<-EOM

   NAME
      shelp  -  Framework léger pour la gestions de scripts shell

   SYNOPSIS

    Information sur l'état de shelp
      Affiche l'aide
        shelp
        shelp help|man|usage

    Gestion de shelp
      Installe
        curl gitlab.local/datalyse/shelp/-/raw/master/scripts/install_shelp | bash
      Désinstalle
        shelp uninstall|remove|delete
      Met à jour
        shelp update

      Gestion des scripts
        shelp install <git repo>    # installe un script
        shelp uninstall <script id>
        shelp update <script id>

      Édition des scripts
        Génère un projet de script
          shelp new \$SCRIPT_ID
        Relie le script à un repo remote
          shelp link \$SCRIPT_ID \$ORIGIN_URL
        Affiche le répertoire vers le script
          shelp path \$SCRIPT_ID
        Affiche le path vers le répertoire du script
          shelp dir \$SCRIPT_ID
        Sauvegarde des modifications
          shelp save \$SCRIPT_ID [ "\$COMMIT_MESSAGE" ]
        Ajoute une commande
          shelp add-command \$SCRIPT_ID \$COMMAND_NAME
EOM
 }

  SCRIPTS_ROOT=$HOME/.local/share

  new(){
    SCRIPT_ID=$1
    SCRIPT_DIR=$SCRIPTS_ROOT/$SCRIPT_ID

    [ ! -d "$SCRIPT_DIR" ] || failed "to generate new script (répertoire existe)"
    which $SCRIPT_ID 2>/dev/null 1>/dev/null && failed "to generate new script (exécutable '$SCRIPT_ID' existe déjà)" || :
    git init "$SCRIPT_DIR"
    mkdir $SCRIPT_DIR/bin
    touch $SCRIPT_DIR/lisez-moi.md
    ln -s $SCRIPT_DIR/lisez-moi.md $SCRIPT_DIR/readme.md

  cat <<-EOMM > $SCRIPT_DIR/bin/$SCRIPT_ID

#! /bin/bash

$SCRIPT_ID()(
  set -eu -o pipefail
     SCRIPT_BASE=\$(dirname \$(dirname "\$(readlink -f \${BASH_SOURCE[0]})"))
     failed(){
         >&2 echo -e "\n$SCRIPT_ID ERROR\nFailed \$@\n" && exit 1 ;
     }

     usage(){
     cat <<-EOM

        NAME
           $SCRIPT_ID  -  Brève description de $SCRIPT_ID

        SYNOPSIS

         Information sur $SCRIPT_ID
           Affiche l'aide
             $SCRIPT_ID
             $SCRIPT_ID help|man|usage

EOM
}

# Commands functions

# Parse et valide les arguments
${SCRIPT_ID}_COMMAND=\${1:-usage}

case \${${SCRIPT_ID}_COMMAND} in
  usage|help|man|h|-h|--help) set -- usage \${@:2} ;;
  # Commands arguments
  *)
    echo "Commande '\$1' non reconnu"; exit 1
    ;;
esac

# execute
\$@

)


[ "\${BASH_SOURCE[0]}"  != "\$0" ] || $SCRIPT_ID \$@

EOMM

    chmod +x $SCRIPT_DIR/bin/$SCRIPT_ID
    ln -s $SCRIPTS_ROOT/$SCRIPT_ID/bin/$SCRIPT_ID  $HOME/.local/bin/shelp-$SCRIPT_ID
    ln -s $SCRIPTS_ROOT/$SCRIPT_ID/bin/$SCRIPT_ID  $HOME/.local/bin/$SCRIPT_ID

    git -C "$SCRIPT_DIR" add .
    git -C "$SCRIPT_DIR" commit -m "Initialisaiton de $SCRIPT_ID avec shelp"

  }



  install(){
    NAME=${1/\:/\/}
    NAME=${NAME/@/\/}
    NAME=$(basename $NAME)
    NAME=${NAME%.*}
    git clone $1 $SCRIPTS_ROOT/$NAME || failed to retrieve project $NAME "$1"
    ln -s $HOME/.local/share/$NAME/bin/$NAME  $HOME/.local/bin/shelp-$NAME
    ln -s $HOME/.local/share/$NAME/bin/$NAME  $HOME/.local/bin/$NAME

  }


  uninstall(){
    NAME=$1
    rm -rf $HOME/.local/share/$NAME \
    && rm $HOME/.local/bin/shelp-$NAME  && rm $HOME/.local/bin/$NAME \
    || failed to find project $NAME
  }

  update(){
    NAME=${1:-shelp}
    # todo: gestion d'erreur
    git -C $HOME/.local/share/$NAME  pull || failed to update "'${NAME}'"
  }

  list(){
    { ls $HOME/.local/bin/ 2> /dev/null || echo No script found ; } \
    | grep ^shelp-| sed 's/shelp-\(.*\)/\1/'
  }

  _path(){
    SCRIPT_ID=$1
    SCRIPT_PATH=$SCRIPTS_ROOT/$SCRIPT_ID/bin/$SCRIPT_ID
    [ -f "$SCRIPT_PATH" ] && echo $SCRIPT_PATH || failed to retrieve path for $SCRIPT_ID
   }

  _directory(){
    SCRIPT_ID=$1
    SCRIPT_DIR=$SCRIPTS_ROOT/$SCRIPT_ID
    [ -d "$SCRIPT_DIR" ] && echo $SCRIPT_DIR || failed to retrieve directory for $SCRIPT_ID

  }

  _link(){
    SCRIPT_ID=$1
    REMOTE_URL=$2
    git -C $(_directory $SCRIPT_ID) remote add origin $REMOTE_URL
    git -C $(_directory $SCRIPT_ID) ls-remote 1>/dev/null 2>/dev/null || failed to link $SCRIPT_ID to $REMOTE_URL
    git -C $(_directory $SCRIPT_ID) push -u origin master
  }

  _save(){
   SCRIPT_ID=$1
   MESSAGE=${@:2}
   git -C $(_directory $SCRIPT_ID) add .
   git -C $(_directory $SCRIPT_ID) commit -m "${MESSAGE:-commit using shelp save}"
   git -C $(_directory $SCRIPT_ID) push
  }

 _add_command(){
   #set -x

   SCRIPT_ID=$1
   COMMAND_NAME=$2
   file=$(_path $SCRIPT_ID)
   output_file=/tmp/$(uuidgen)
   echo"" > $output_file


  # Commands functions
  while read line
  do
    echo $line  >> $output_file
    echo $line | grep -q "# Commands functions" && {
    cat <<-EOM >> $output_file
 _${COMMAND_NAME/-/_}(){
  echo "IMPLEMENT $COMMAND_NAME function here"
 }
EOM
} || :

echo $line | grep -q "# Commands arguments" && {
cat <<-EOM >> $output_file
  ${COMMAND_NAME})  set -- _${COMMAND_NAME/-/_} \${@:2} ;;

EOM
} || :

  done < $file

 mv $output_file $file
 chmod +x $file

  # Commands arguments

 }



# Parse et valide les arguments
SHELP_COMMAND=${1:-usage}

case ${SHELP_COMMAND} in
  usage|help|h|-h|--help) set -- usage ${@:2} ;;
  i|install) set -- install ${@:2} ;;
  r|uninstall|remove) set -- uninstall ${@:2} ;;
  u|update) set -- update ${@:2} ;;
  l|list|ls) set -- list ${@:2} ;;
  n|new) set -- new ${@:2} ;;
  p|path) set -- _path ${@:2} ;;
  dir) set -- _directory ${@:2} ;;
  link) set -- _link ${@:2} ;;
  save) set -- _save ${@:2} ;;
  add-command) set -- _add_command ${@:2} ;;
  *)
    echo "Commande '$1' non reconnu"; exit 1
    ;;
esac

# execute
$@

)


[ "${BASH_SOURCE[0]}"  != "$0" ] || shelp $@
